using Arrow
using DataFrames
using CSV
using Dierckx
using Plots
using JLD
using SparseArrays
using FLOWMath
using PolyFit
using Statistics
"""
This script takes the filename specificied by the user to look at specified XZ and YZ slices in SOWFA Data
The slices of data are prepped for plotting in contour plots as well as saving to be compared to with 
FLOWFarm results and FLORIS results.

XZ slice and YZ slice data are saved as .jld files named by filename and filenameYZ respectively.
These files can be opened up to be compared with FLORIS and FLOWFARM simulations.

"""

function gridpoint(TD, dx)
    Minus_5 = TD - 5.0
    multiple = Minus_5/dx
    point = 5 + (10*round(multiple))
    return point
end

function neg_filter(negative)
    QQQ = size(negative)
    average = mean(negative[:,1:35], dims=2)
    QQQ = size(negative)
    negative_negative = average
    for i in 1:QQQ[2]-1
        negative_negative = hcat(negative_negative, average)
    end

    negative = negative-negative_negative
end

function deflection(C_T, d, gamma, ky, kz, sig0y, sig0z, theta_c0, x, I)
    # Constant parameters
    alpha = 2.32;
    Beta = 0.154;

    x_0 = d*cos(gamma)*(1 + sqrt(1-C_T))/(sqrt(2)*(alpha*I+Beta*(1-sqrt(1-C_T))))
    x = x_0:x;
    sigy = ky*(x.-x_0) .+ d*sig0y
    sigy = abs.(sigy)
    sigz = kz*(x.-x_0) .+ d*sig0z
    sigz = abs.(sigz)
    # print("sigy: ", sigy, "\n")
    # print("sigz: ", sigz, "\n")
    # print("(d^2 * cos(gamma)): ", (d^2 * cos(gamma)), "\n")
    # print("1.6*sqrt.((8 *sigy.*sigz)/(d^2 * cos(gamma))): ", 1.6*sqrt.((8 *sigy.*sigz)/(d^2 * cos(gamma))))
    a = (1.6 + sqrt(C_T))*(1.6*sqrt.((8 *sigy.*sigz)/(d^2 * cos(gamma))) .- sqrt(C_T))
    b = (1.6 - sqrt(C_T))*(1.6*sqrt.((8*sigy.*sigz)/(d^2 * cos(gamma))) .+ sqrt(C_T))
    # print("astuff: ", 1.6*sqrt.((8 *sigy.*sigz)/(d^2 * cos(gamma))) .- sqrt(C_T), "\n")
    c = theta_c0*(x_0)/d
    e = (theta_c0/14.7)*sqrt(cos(gamma)/(ky*kz*C_T))*(2.9-1.3*sqrt(1-C_T)-C_T)
    # print("a./b: ", a./b, "\n")
    defl = d*(c .+ e*log.(a./b))
    return defl, x
end

function deflection_call(index, ky, kz, sig0y, sig0z, TILT, I, C_T)
    ky = ky[index]
    kz = kz[index]
    d = 126.0
    # kz2 = -0.003
    # # sigma0y = 0.15441985668899924
    # # sigma0x = 0.29874
    # d = 126.0
    # # Bastankhah numbers

    alpha = 2.32
    beta = 0.154
    tilt = TILT[index] * pi/180     # degrees
    x = 3000;

    sigma0y = sig0y[index]   # 1/sqrt(8)
    sigma0z = sig0z[index]      # cos(tilt)/sqrt(8)


    theta_c0 = ((0.3*tilt)/cos(tilt))*(1-sqrt(1-C_T*cos(tilt)))

    delf, x_var = deflection(C_T, d, tilt, abs(ky), abs(kz), sigma0y, sigma0z, theta_c0, x, I)


    return delf, x_var
end

function kykzint(sigmay, sigmaz, X_D_y, X_D_z, beginning)
    # # Y_direction

    Q = polyfit(X_D_y[beginning:end], sigmay[beginning:end], 1)
    ky = Q[1]
    eps = Q[0]
    Z_values = eps.+ky.*X_D_y[beginning:end]

    # # Z_direction
    Qz = polyfit(X_D_z, sigmaz, 1)
    kz = Qz[1]
    epsz = Qz[0]
    Y_values = epsz.+kz.*X_D_z
    ky = round(ky, digits=3)
    kz = round(kz, digits=3)

    return Z_values, Y_values, ky, kz, epsz, eps
end

"""SOWFA Single Turbine Filenames"""
# file_1 = "/Users/jamescutler/Downloads/byu_tilt_runs_single_opp/c_001_sp7_1turb_hNormal_D126_tilt_-15/lite_data_001.ftr"
# file_1 = "/Users/jamescutler/Downloads/byu_tilt_runs_single_opp/c_002_sp7_1turb_hNormal_D126_tilt_-20/lite_data_002.ftr"
# file_1 = "/Users/jamescutler/Downloads/byu_tilt_runs_single_opp/c_003_sp7_1turb_hNormal_D126_tilt_-35/lite_data_003.ftr"

"""SOWFA Single Turbine Filenames"""
# file_1 = "/Users/jamescutler/Downloads/byu_tilt_runs_single/c_000_sp7_1turb_hNormal_D126_tilt_base/lite_data_000.ftr"
# file_1 = "/Users/jamescutler/Downloads/byu_tilt_runs_single/c_001_sp7_1turb_hNormal_D126_tilt_5/lite_data_001.ftr"
# file_1 = "/Users/jamescutler/Downloads/byu_tilt_runs_single/c_002_sp7_1turb_hNormal_D126_tilt_10/lite_data_002.ftr"
file_1 = "/Users/jamescutler/Downloads/byu_tilt_runs_single/c_003_sp7_1turb_hNormal_D126_tilt_25/lite_data_003.ftr"



"""Sigma data"""
# How are these dervied?
# sigma0x = 0.29874
# sigma0y = 0.15441985668899924

# -15 tilt
X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
sigmay = [1.6079674017100833, 2.0058850864305193, 0.6464026239523623, 0.4982147063609224, 0.4298866662767064, 0.3790282034525116,0.36563170476511053, 0.37339419800048723, 0.3487206493838459, 0.35726981422395804, 0.3594724581663881, 0.33551358029123796, 0.3283727700109541, 0.30980429628409684, 0.26902110279114033, 0.23748843617942725, 0.2197265098782207] #sigy
sigmaz = [0.949429050435477, 1.6618690680233767, 0.48852696359525305, 0.38868326448953006, 0.35269031328577893, 0.3177947941831356, 0.31977499921936153, 0.333627422131592, 0.35465150192559197, 0.3919192425454063, 0.4070657577618838, 0.44866105891282876, 0.4845735336212371, 0.5241963213842247, 0.5530000112319885, 0.6265598774479376, 0.6619233506141613]  #sigz
Z_C_15_n = [88.15958593107578, 98.23708436457522, 104.51298129779424, 110.13933665936386, 113.81765574654712, 117.13170636290126, 120.13255946747951, 122.52972220105784, 124.24880477273803, 126.52268793026317, 127.91193648747887, 128.9873689824886, 129.5293452912365, 130.74622516535294, 131.3151812026898, 131.97994529732821, 132.70137331226812] #Z
Y_C_15_n = [2499.458080542129, 2497.326590321634, 2497.3707534727528, 2495.0208774988682, 2493.3587635138374, 2490.605822750391, 2489.0959217663976, 2486.3232236375966, 2484.677127601138, 2481.63237944456, 2480.869684054634, 2478.818191956405, 2476.728508334095, 2475.68174855053, 2474.8342232757345, 2473.8641488032813, 2473.473876998827]  #Y


# -20 tilt
X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
sigmay = [1.2552426767761358, 1.7803897667598843, 0.6463062709533344, 0.4921535563291503, 0.4233110506240444, 0.3969723445537178, 0.379830997727377, 0.3771159496188053, 0.38169479447061555, 0.3562513068381116, 0.35799526884431887, 0.3500638518415055, 0.3277814394102879, 0.2810343469258474, 0.22279678971917802, 0.18127615972200717, 0.10657345360719093] #sigy
sigmaz = [0.6669235730726144, 1.2148165661261072, 0.4765130372073104, 0.3912837625878571, 0.3503571080300599, 0.3408815793355835, 0.3236542355944509, 0.339051853526612, 0.37697531328877676, 0.4132354402859387, 0.46658483758661434, 0.5126366084068461, 0.5578363947398289, 0.6017349645383988, 0.6354914143920146, 0.6487096419945122, 0.737022663190537]  #sigz
Z_C_20_n = [86.67967290270168, 99.57409026516494, 106.9731067916532, 113.17082138162434, 117.68569837774646, 121.10515613116911, 125.0647932743461, 127.59230194192958, 130.0875399030215, 132.60539960368172, 134.50330716038027, 136.9624073411914, 138.21897184021145, 139.670846878197, 141.41488854517448, 142.9225867769201, 143.48364527942243] #Z
Y_C_20_n = [2499.5017460005624, 2499.18071915521, 2496.0314264539966, 2494.209479744589, 2494.177134794114, 2490.1312412042626, 2487.7475387888894, 2485.6283524518453, 2483.3461286702814, 2481.901625030293, 2480.214783617409, 2477.351825323099, 2475.2401820779696, 2473.9938396100483, 2471.382073553874, 2469.9704467611814, 2470.10531865683]  #Y

# -35 tilt
X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
sigmay = [0.8244189698800157, 0.6024029799815012, 0.6093224081303246, 0.44960976022089494, 0.3930630568303988, 0.3981832174820402, 0.40878289334383894, 0.4133568239744189, 0.4316356803488093, 0.44549026593433294, 0.41397123983424244, 0.3373843700209892, 0.24227933603634463, 0.16628784154209447, 0.08308782524573832, 0.04155571896672743, 0.0003380983183455808] #sigy
sigmaz = [0.19442217786655325, 0.28849874304008444, 0.33692615612725063, 0.2884963264451269, 0.2528694925146376, 0.2702897752485132, 0.2999455599959315, 0.3271669864639892, 0.408422978188509, 0.49748974732356116, 0.5317605069322571, 0.5914962077570648, 0.6115388247913511, 0.6766985283865756, 0.6850189280875735, 0.7212086761124722, 0.777435658398414]  #sigz
Z_C_35_n = [86.24157466564435, 101.07226492136716, 107.98423990611295, 114.48634452501115, 119.33816986028027, 123.96146024920974, 127.60961005557837, 130.7080488408067, 133.7541541174053, 136.09111053613393, 137.20979265905464, 139.16941083706243, 140.03357910572657, 142.18861329197557, 143.21457516698212, 145.516263445937, 147.54833712565144 ] #Z
Y_C_35_n = [2499.4479240528767, 2497.5936804928006, 2497.5560261660526, 2494.3777931940303, 2490.980027067911, 2489.7095444419933, 2487.9339418725854, 2484.716542663103, 2483.3452186122245, 2480.4934846644182, 2477.110726834622, 2475.8103683288755, 2473.497260000254, 2471.422293511948, 2468.8066275355054, 2466.756811846001, 2466.9068485137072]  #Y


# -5 tilt (default)
X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
sigmay = [3.620652395011077, 1.9001187174615162, 0.9353771135750221, 0.5107471971198718, 0.42978473208759005, 0.3839338461743554, 0.374063788603435, 0.39012705439447876, 0.38695709154680563, 0.39829126421577415, 0.39095118850320143, 0.39704689354359385, 0.3977004627441319, 0.4107123220098429, 0.4129081941055791, 0.4344748292590568, 0.4337127025518822] # sigmay
sigmaz = [2.2432098786983983, 1.3961719125350165, 0.755954254565374, 0.4592818994838727, 0.40318738840385854, 0.37372102633918103, 0.367752253933641, 0.3744143075411739, 0.38718786846898806, 0.3981052800029568, 0.4121418848254266, 0.4274035829902239, 0.4388200797964752, 0.4295260071830763, 0.4398919361685257, 0.4456690402908989, 0.45604487734391563]   # sigmaz
Z_C_0 = [89.94610061435328, 95.49645626896056, 98.2265475064328, 100.49529508064013, 102.72240537093262, 103.85038109397676, 104.23645245320908, 105.01900208844084, 104.93112639911536, 104.7918075084111, 104.9938387356675, 104.82326870778621, 104.86740609339417, 104.83345927184934, 104.69344627371628, 104.80461048081625, 104.35492208525451] #Z
Y_C_0 = [2499.523949696036, 2497.508003392592, 2497.6743370066906, 2495.863164631482, 2495.159256668798, 2493.451633868584, 2490.88406339492, 2490.7839345469697, 2487.6064300432463, 2485.859849423469, 2484.6473931202268, 2481.7582190813796, 2481.5359719974263, 2480.7214458760063, 2480.3737585938, 2478.883566974432, 2478.468778649857] #Y


# 5 tilt
X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
sigmay = [10.534416743706212,0.8979433225831808, 0.5569370891146653, 0.46228632687176574, 0.4418692238389031, 0.41063591760341434,0.41268488637221923,0.42743981210750065,0.4343290431766817,0.4489958375269006,0.4643980521496253 ,0.4836357967619406, 0.5010995126571905, 0.515328329804013,0.5402094497258708, 0.5632812606569052, 0.6009223174375284]   #sigy
sigmaz = [6.350511686246529, 0.6520098397072024, 0.43916231513688375, 0.3746798584886675,0.3602545016781201, 0.3226843978434129, 0.3080967463394823,0.3039904260707824,0.3005203899809468,0.29732923038334,0.2986499019389889 ,0.2965946573010577, 0.2910329829458407, 0.2901500696761998, 0.2901309224379686, 0.2891634120433182, 0.296594048549694] #sigz
Z_C_5 = [89.09719716901935, 90.83767756026221, 90.57815228052672, 90.56968791075349, 89.84733116085401, 88.90706483595609, 87.81384325102103, 86.17736323455676, 84.93916831923703, 83.33615473808837, 83.01225858048416, 83.01225858048416, 83.36245394470659, 83.49590653288737, 83.75392978996629, 83.53494826586216, 83.78266554390308] #Z
Y_C_5 = [2498.844542166793, 2498.472154616501, 2498.642610484224, 2496.735668172087, 2497.458928903369, 2494.971424293041, 2495.233783501523, 2491.9747863764346, 2490.42943217409, 2488.5478994637215, 2486.912432107493, 2485.843154252683, 2485.4458719136783, 2483.975377615859, 2481.833086416161, 2479.6583534584865, 2478.742380819284]  #Y


# 10 tilt
X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
sigmay = [11.566856354862932, 0.8185251072516069,0.5355890686338116, 0.45141676234400213, 0.4198328468956569,0.41092625935179605, 0.4365946044526015, 0.45786695605186933, 0.4761876253994781,  0.5024869779943413, 0.5432325346790041, 0.5607871134207331, 0.592533332663219, 0.6477570021530344, 0.696919810604235, 0.7424828574881366, 0.7963861251101604] # Y
sigmaz = [6.783853290532606, 0.5910436850172545, 0.4338064559726529, 0.35225416739924853, 0.30711028779394,  0.27819983503607737, 0.25761052244449867, 0.24702471526565073, 0.23594624795837132,0.22987186516455954,0.2270829576046232, 0.2199480212623694, 0.21557963364859323, 0.2137683702248472, 0.20958322679802785, 0.2025967047878765, 0.20408758263581525]   # Z
Z_C_10 = [89.84930372573861, 89.15685807798387, 87.95254645572378, 86.93113236227126, 85.36731160248235, 84.22435662501483, 83.02633897451912, 81.51882521152714, 80.37198214327715, 80.15840546542358, 79.88989596041188, 79.9248167898811, 80.63345656385897, 81.45434499142415, 81.77754154892244, 82.67950937818864, 83.29039704849045] #Z
Y_C_10 = [2498.952574389726, 2497.6993665868113, 2499.0557606436373, 2497.970465656208, 2497.7687994141324, 2496.5773441608903, 2495.550145160467, 2492.2674099726833, 2491.995153619506, 2489.8344180040776, 2488.8719334679317, 2488.572397809847, 2486.5378318959324, 2485.032066740046, 2482.946141210619, 2478.99808802504, 2475.3402585202098]  #Y


# 25 tilt
# Noticeable kidney bean shape around 10 D downstream
X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
sigmay = [1.0486518586374045, 0.929293481327818, 0.5013492046906606,  0.4703943454181189, 0.5141311666540866, 0.5227016949321093, 0.571273034792967, 0.6984934204639048, 0.8170952006429221, 0.9800922833172495, 1.1046498554300472, 1.261702986758678, 1.38654058454812, 1.6379134114473277, 1.8018044888183442, 2.007842886875235, 2.1578047721042277] #sigy
sigmaz = [0.4046093385523854, 0.5511559633520392, 0.26678936599278036, 0.21017174971273248, 0.16734336575795677, 0.12584344241611423, 0.09809101432374921, 0.06939870802606617, 0.046205874802820276, 0.017427648446448302, -0.008797192917793782, -0.03504928798436168, -0.05928478605242399, -0.08988956947543056, -0.11409218319420603, -0.14206048303716606, -0.16536844136511167]  #sigz
Z_C_25 = [90.56968249109853, 82.16694970360412, 77.67281363265396, 73.2499960248699, 70.46213068067172, 67.28112760800242, 63.830002769756256, 62.58413771830426, 60.84087272998218, 60.74035480174294, 60.50779317293857, 61.29980418883348, 61.50922354059292, 62.24987121347377, 62.54121663872897, 63.34436655991553, 63.28341317975336] #Z
Y_C_25 = [2499.2230841068795, 2499.6188773649087, 2498.801895435778, 2497.976160591793, 2499.435063879633, 2498.5479741789864, 2495.763863434187, 2493.920857733599, 2494.040014654551, 2495.147623157222, 2497.269334989691, 2495.4982137558186, 2494.7547797690745, 2489.943247887391, 2489.0370058659, 2477.0301802742542, 2456.8345831043994]  #Y


# # polyfit for each angle
# endz = 16
# start35 = 5
# start20 = 7
# start15 = 6
# start0 = 6
# start5 = 6
# start10 = 6
# start25 = 5
# # -5
# beginning = 1
# Z_values_0, Y_values_0, ky_0, kz_0, z0_0, y0_0 = kykzint(sigmay_0[start0:endz], sigmaz_0[start0:endz], X_D[start0:endz], X_D[start0:endz], beginning)

# # 5
# beginning = 1
# Z_values_5, Y_values_5, ky_5, kz_5, z0_5, y0_5 = kykzint(sigmay_5[start5:endz], sigmaz_5[start5:endz], X_D[start5:endz], X_D[start5:endz], beginning)

# # -5
# beginning = 1
# Z_values_10, Y_values_10, ky_10, kz_10, z0_10, y0_10 = kykzint(sigmay_10[start10:endz], sigmaz_10[start10:endz], X_D[start10:endz], X_D[start10:endz], beginning)

# # -5
# beginning = 1
# Z_values_25, Y_values_25, ky_25, kz_25, z0_25, y0_25 = kykzint(sigmay_25[start25:endz], sigmaz_25[start25:endz], X_D[start25:endz], X_D[start25:endz], beginning)

# # -15
# beginning = 1
# Z_values_15_n, Y_values_15_n, ky_15_n, kz_15_n, z0_15_n, y0_15_n = kykzint(sigmay_15_n[start15:endz], sigmaz_15_n[start15:endz], X_D[start15:endz], X_D[start15:endz], beginning)

# # -20
# beginning = 1
# Z_values_20_n, Y_values_20_n, ky_20_n, kz_20_n, z0_20_n, y0_20_n = kykzint(sigmay_20_n[start20:endz], sigmaz_20_n[start20:endz], X_D[start20:endz], X_D[start20:endz], beginning)

# # -35
# beginning = 1
# Z_values_35_n, Y_values_35_n, ky_35_n, kz_35_n, z0_35_n, y0_35_n = kykzint(sigmay_35_n[start35:endz], sigmaz_35_n[start35:endz], X_D[start35:endz], X_D[start35:endz], beginning)



# # plotting
# # # sigmaz
# endz = 16


# plot(X_D[start35:endz], sigmaz_35_n[start35:endz],seriestype=:scatter,markershape=:square,color=:orange,  label="\\gamma=-35")
# plot!(X_D[start20:endz], sigmaz_20_n[start20:endz],seriestype=:scatter,markershape=:star,color=:purple, label="\\gamma=-20")
# plot!(X_D[start15:endz], sigmaz_15_n[start15:endz],seriestype=:scatter,markershape=:star5,color=:magenta,  label="\\gamma=-15")
# plot!(X_D[start0:endz], sigmaz_0[start0:endz],seriestype=:scatter,markershape=:circle,color=:red, label="\\gamma=-5")
# plot!(X_D[start5:endz], sigmaz_5[start5:endz],seriestype=:scatter,markershape=:square,color=:blue,  label="\\gamma=5")
# plot!(X_D[start10:endz], sigmaz_10[start10:endz],seriestype=:scatter,markershape=:star,color=:green, label="\\gamma=10")
# plot!(X_D[start25:endz], sigmaz_25[start25:endz],seriestype=:scatter,markershape=:star5,color=:black,  label="\\gamma=25")
# plot!(X_D[start35:endz], Y_values_35_n,color=:orange,label="kz=$kz_35_n")
# plot!(X_D[start20:endz], Y_values_20_n,color=:purple,label="kz=$kz_20_n")
# plot!(X_D[start15:endz], Y_values_15_n,color=:magenta, label="kz=$kz_15_n")
# plot!(X_D[start0:endz], Y_values_0,color=:red,label="kz=$kz_0")
# plot!(X_D[start5:endz], Y_values_5,color=:blue,label="kz=$kz_5")
# plot!(X_D[start10:endz], Y_values_10,color=:green, label="kz=$kz_10")
# plot!(X_D[start25:endz], Y_values_25,color=:black,label="kz=$kz_25", ylabel="\\sigma_z/D", xlabel="X/D", legend=:outertopright, grid=false)
# # xlims!(3.8,11.2)
# # ylims!(-0.22,0.6)
# savefig("kz_alltilt_neg_pos_new.png")

# # # # sigmay
# plot(X_D[start35:endz], sigmay_35_n[start35:endz],seriestype=:scatter,markershape=:square,color=:orange,  label="\\gamma=-35")
# plot(X_D[start20:endz], sigmay_20_n[start20:endz],seriestype=:scatter,markershape=:star,color=:purple, label="\\gamma=-20")
# plot!(X_D[start15:endz], sigmay_15_n[start15:endz],seriestype=:scatter,markershape=:star5,color=:magenta,  label="\\gamma=-15")
# plot!(X_D[start0:endz], sigmay_0[start0:endz],seriestype=:scatter,markershape=:circle,color=:red, label="\\gamma=-5")
# plot!(X_D[start5:endz], sigmay_5[start5:endz],seriestype=:scatter,markershape=:square,color=:blue,  label="\\gamma=5")
# plot!(X_D[start10:endz], sigmay_10[start10:endz],seriestype=:scatter,markershape=:star,color=:green, label="\\gamma=10")
# plot!(X_D[start25+1:endz], sigmay_25[start25+1:endz],seriestype=:scatter,markershape=:star5,color=:black,  label="\\gamma=25")
# # plot!(X_D[start35:endz], Z_values_35_n,color=:orange,label="kz=$kz_35_n")
# plot!(X_D[start20:endz], Z_values_20_n,color=:purple,label="ky=$kz_20_n")
# plot!(X_D[start15:endz], Z_values_15_n,color=:magenta, label="ky=$kz_15_n")
# plot!(X_D[start0:endz], Z_values_0,color=:red,label="ky=$kz_0")
# plot!(X_D[start5:endz], Z_values_5,color=:blue,label="ky=$kz_5")
# plot!(X_D[start10:endz], Z_values_10,color=:green, label="ky=$kz_10")
# plot!(X_D[start25+1:endz], Z_values_25[2:end],color=:black,label="ky=$kz_25", ylabel="\\sigma_y/D", xlabel="X/D", legend=:outertopright, grid=false)
# # xlims!(3.8,11.2)
# # ylims!(-0.22,0.6)
# savefig("ky_alltilt_new_pos_new.png")

# # ky and kz as a function of tilt
# Tilt = [-35, -20, -15, -5, 5, 10, 25]
# Tilty = [-20, -15, -5, 5, 10, 25]
# ky_arr = [-0.027, -0.007, -0.003, 0.009, 0.031, 0.04]
# kz_arr = [0.047, 0.04, 0.031, 0.009, -0.003, -0.007, -0.027]

# Q = polyfit(Tilty, ky_arr, 1)
# ky_val = Q[1]
# eps_y = Q[0]
# Z_values = eps_y.+ky_val.*Tilty

# Q = polyfit(Tilt, kz_arr, 1)
# kz_val = Q[1]
# eps_z = Q[0]
# Y_values = eps_z.+kz_val.*Tilt

# ky_val = round(ky_val, digits=3)
# kz_val = round(kz_val, digits=3)
# eps_y = round(eps_y, digits=3)
# eps_z = -round(eps_z, digits=3)
# plot(Tilty, ky_arr, seriestype=:scatter,color=:blue, label="ky")
# plot!(Tilt, kz_arr, seriestype=:scatter,color=:red, label="kz")
# plot!(Tilty, Z_values,label="$ky_val\\gamma + $eps_y", color=:blue)
# plot!(Tilt, Y_values,label="$kz_val\\gamma - $eps_z", color=:red, legend=:left, ylabel="k-value", xlabel="Turbine Tilt (degrees)", grid=false)
# savefig("kykztilt_both_new.png")

# -5 tilt (default)
# X_D = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
# sigmay = [0.43558933580700243, 0.3849023106472279, 0.371602317089002, 0.3784555734334545, 0.384645377630294, 0.3821693621079923, 0.3920122241892837, 0.40906682219417306] # sigmay
# sigmaz = [0.3248600444941308, 0.28934389948149897, 0.27230179133941784, 0.2637512382064413, 0.23999184075039431, 0.22293325144256623, 0.2111828753220627, 0.19827940294790886]   # sigmaz
# Z_C_0 = [99.63967017354084, 98.45427852648643, 96.59368232105771, 91.95162426180555, 85.0814652582951, 76.46572702298704, 69.9175617140443, 60.266311677827595] #Z
# Y_C_0 = [2497.0221038268683, 2495.4384888802556, 2494.2258039351427, 2494.6278563934866, 2494.730346059316, 2496.09527267563, 2496.8996770145145, 2490.382155887092] #Y


# X_D = [4, 5, 6, 7, 8, 9, 10, 11]
# sigmay = [0.43558933580700243, 0.38682713173418865, 0.3729651664824919, 0.3820953498643966, 0.39477694638407024, 0.395521043066644, 0.40506571281243925, 0.410193929282697, 0.4190685603089271, 0.42548378944096543, 0.42577196393967665] #Y
# sigmaz = [0.3248600444941308, 0.30429338285686497, 0.28678867463386587, 0.28051406001833296, 0.27548699524201975, 0.28768974733321134, 0.2823458674900679, 0.2714577088623376, 0.261623344290019, 0.2513207565201982, 0.2121673077529078]    #Z
# Z_C_0 = [99.76862781602301, 103.50046574468377, 105.86697482403154, 107.78640388442014, 109.72850601128532, 110.3134873081655, 110.33635752886255, 110.61448355053594, 110.03282647975072, 110.3151921530234, 109.60895778654945] #Z
# Y_C_0 = [2496.118755976693, 2496.4528605178893, 2496.059090971596, 2495.7312629558537, 2496.569377119317, 2496.720327553422, 2496.7517153476315, 2496.3985982537256,  2496.35324849247, 2496.8414607376394, 2496.4207757132504] # dY

# 5 tilt
# X_D = [4, 5, 6, 7, 8, 9, 10, 11]
# sigmay = [0.43768156977770806, 0.4008992621275602, 0.3985506784434525, 0.40588138933769524, 0.4213990843170151, 0.43935841167912815, 0.4503615462538922, 0.48473136277857326]
# sigmaz = [0.2827904780501523, 0.24403377341394164, 0.22004936957576926, 0.20288644282846177, 0.17262718039501648, 0.14632905780823344, 0.12709286395116817, 0.10233420322283424]
# Z_C_5 = [88.4061997235887, 87.6668665653627, 83.53242730274529, 80.02195980208653, 73.8526132629067, 67.81575780501393, 63.00202558179132, 57.41052962659714] #Z
# Y_C_5 = [2498.1670258309923, 2497.387464043016, 2497.6080703069997, 2496.064361518402, 2496.1784027004824, 2496.8795619057587, 2495.2518755845895, 2494.299918234909]  #Y

# 10 tilt
# X_D = [4, 5, 6, 7, 8, 9, 10, 11]
# sigmay = [0.45806267486976093, 0.39692834627417295, 0.41135144280690256, 0.4253305807374344, 0.44906416444232894, 0.46475184784103357, 0.49581184974891784, 0.5106992676959436] # Y
# sigmaz = [0.2243011134004611, 0.19216694758207092, 0.1640563922780164, 0.14210369170699114, 0.1127625035202978, 0.0907907337176842, 0.06386642457900364,  0.044683091016937175]   # Z
# Z_C_10 = [83.49768448270565, 81.74066544888844, 76.83889812534574, 71.6312013311421, 67.3194618675204, 63.20050680722589, 58.25342380244782, 53.2284885542085] #Z
# Y_C_10 = [2500.202643252283, 2498.305648161068, 2498.696901955447, 2498.1955580107924, 2497.253076009381, 2496.4693414156313, 2497.8010114824424, 2497.54738890988]  #Y

# 25 tilt
# X_D = [4, 5, 6, 7, 8, 9, 10, 11]
# sigmay = [0.4727635239666252, 0.47105538761539123, 0.5014435044827972, 0.5278467146454514, 0.5640883377715035, 0.5860256685796438, 0.6121778442264209, 0.6409016657181129]
# sigmaz = [0.07012474670578521, 0.026754681513178256, -0.013072929973284412, -0.050440626623954106,  -0.09496277194798287, -0.12211945349343398, -0.16239398469050798, -0.20609922972605751]
# Z_C_25 = [67.25371769433993, 62.130306440546086, 58.4666343552621, 55.25496964164948, 51.66377112780846, 48.50200230182843, 44.92602406185611, 41.753554873174146] #Z
# Y_C_25 = [2499.6173322272584, 2499.643499264882, 2498.9038939934544, 2498.180105592254, 2498.149297223707, 2495.567860476737, 2496.69270996085, 2498.2997845054474]  #Y




# seriestype=:scatter,markershape=:square,color=:orange
# seriestype=:scatter,markershape=:star,color=:purple
# seriestype=:scatter,markershape=:star5,color=:magenta
# seriestype=:scatter,markershape=:circle,color=:red
# seriestype=:scatter,markershape=:square,color=:blue
# seriestype=:scatter,markershape=:star,color=:green
# seriestype=:scatter,markershape=:star5,color=:black
# Plot deflections
# plot(X_D, (Y_C_35_n.-2500)/D, label="-35", seriestype=:scatter,markershape=:square,color=:orange)
# plot!(X_D, (Y_C_20_n.-2500)/D, label="-20", seriestype=:scatter,markershape=:star,color=:purple)
# plot!(X_D, (Y_C_15_n.-2500)/D, label="-15", seriestype=:scatter,markershape=:star5,color=:magenta)
# plot!(X_D, (Y_C_0.-2500)/D, label="-5", seriestype=:scatter,markershape=:circle,color=:red)
# plot!(X_D, (Y_C_5.-2500)/D, label="5", seriestype=:scatter,markershape=:square,color=:blue)
# plot!(X_D, (Y_C_10.-2500)/D, label="10", seriestype=:scatter,markershape=:star,color=:green)
# plot!(X_D, (Y_C_25.-2500)/D, label="25",seriestype=:scatter,markershape=:star5,color=:black,  ylabel="\\delta_y/D", xlabel="X/D", legendtitle="Turbine Tilt", legend=:bottom, grid=false)
# xlims!((0,12))
# savefig("deflection_y.png")

# plot(X_D, (Z_C_35_n)/90, label="-35", seriestype=:scatter,markershape=:square,color=:orange)
# plot!(X_D, (Z_C_20_n)/90, label="-20", seriestype=:scatter,markershape=:star,color=:purple)
# plot!(X_D, (Z_C_15_n)/90, label="-15", seriestype=:scatter,markershape=:star5,color=:magenta)
# plot!(X_D, (Z_C_0)/90, label="-5", seriestype=:scatter,markershape=:circle,color=:red)
# plot!(X_D, (Z_C_5)/90, label="5", seriestype=:scatter,markershape=:square,color=:blue)
# plot!(X_D, (Z_C_10)/90, label="10", seriestype=:scatter,markershape=:star,color=:green)
# plot!(X_D, (Z_C_25)/90, label="25",seriestype=:scatter,markershape=:star5,color=:black,  ylabel="\\delta_z/HH", xlabel="X/D", legendtitle="Turbine Tilt", legend=:outertopright, grid=false)
# xlims!((0,12))
# savefig("deflection_Z.png")

""" Filename identifiers for data to be saved to """
# filename = "base.jld"
filenameYZ = "YZ_slice_tilt_opp.jld"
downstream_loc = 9

"""Turbine Locations"""
# In front of next turbine by .45*D
turbine1 = 1325.0       # Wake of turbine1 before it reaches rotor of turbine2

# Turbine Positions in X-direction
T_pos_1 = 505.0

# Rotor diameter
D = 126.0       # meters

# Getting Multiple dowstream locations behind third turbine
T_pos = T_pos_1      # turbine position for looking at downstream positions
t0d = gridpoint((T_pos), 10.0)
t1d = gridpoint((T_pos + 1.0*D), 10.0)
t2d = gridpoint((T_pos + 2.0*D), 10.0)
t3d = gridpoint((T_pos + 3.0*D), 10.0)
t4d = gridpoint((T_pos + 4.0*D), 10.0)
t5d = gridpoint((T_pos + 5.0*D), 10.0)
t6d = gridpoint((T_pos + 6.0*D), 10.0)
t6_5d = gridpoint((T_pos + 6.5*D), 10.0)
t7d = gridpoint((T_pos + 7.0*D), 10.0)
t8d = gridpoint((T_pos + 8.0*D), 10.0)
t9d = gridpoint((T_pos + 9.0*D), 10.0)
t10d = gridpoint((T_pos + 10.0*D), 10.0)
t11d = gridpoint((T_pos + 11.0*D), 10.0)
t12d = gridpoint((T_pos + 12.0*D), 10.0)
t13d = gridpoint((T_pos + 13.0*D), 10.0)
t14d = gridpoint((T_pos + 14.0*D), 10.0)
t15d = gridpoint((T_pos + 15.0*D), 10.0)
t16d = gridpoint((T_pos + 16.0*D), 10.0)
t17d = gridpoint((T_pos + 17.0*D), 10.0)
t18d = gridpoint((T_pos + 18.0*D), 10.0)

inflow = 435.0          # Inflow location to upstream turbine

# y_center = 905.0        # Center y location to indicate center of turbines
y_center = 2505.0        # Center y location to indicate center of turbines

"""Which turbine to see YZ slice"""
slice = t12d
tolerance_comp = 0.5       # m/s
slice_comp = gridpoint((T_pos - 1*D), 10.0)
# print("slice_comp: ", slice_comp)
index_vel = 2
maxv = 9
minv = 8
velocity = minv:(maxv-minv)/8:maxv
velocity = velocity[index_vel]
Z_cut_off = 5
x_low = 1000
x_high = 3000

# Freestream velocity to get (U_inf - U_c) for sigma calculation
U_inf = 8.05     # m/s       Freestream at hubheight


# As the wake recovers there is an influence on our measurements
# this means that tolerance_comp should probably also be adjusted?
# but how do I do that without influencing the results by the model used to change tolerance_comp

## -15 tilt
# X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
# sigmay = [1.6079674017100833, 2.0058850864305193, 0.6464026239523623, 0.4982147063609224, 0.4298866662767064, 0.3790282034525116,0.36563170476511053, 0.37339419800048723, 0.3487206493838459, 0.35726981422395804, 0.3594724581663881, 0.33551358029123796, 0.3283727700109541, 0.30980429628409684, 0.26902110279114033, 0.23748843617942725, 0.2197265098782207] #sigy
# sigmaz = [0.949429050435477, 1.6618690680233767, 0.48852696359525305, 0.38868326448953006, 0.35269031328577893, 0.3177947941831356, 0.31977499921936153, 0.333627422131592, 0.35465150192559197, 0.3919192425454063, 0.4070657577618838, 0.44866105891282876, 0.4845735336212371, 0.5241963213842247, 0.5530000112319885, 0.6265598774479376, 0.6619233506141613]  #sigz
# Z_C_15_n = [88.15958593107578, 98.23708436457522, 104.51298129779424, 110.13933665936386, 113.81765574654712, 117.13170636290126, 120.13255946747951, 122.52972220105784, 124.24880477273803, 126.52268793026317, 127.91193648747887, 128.9873689824886, 129.5293452912365, 130.74622516535294, 131.3151812026898, 131.97994529732821, 132.70137331226812] #Z
# Y_C_15_n = [2499.458080542129, 2497.326590321634, 2497.3707534727528, 2495.0208774988682, 2493.3587635138374, 2490.605822750391, 2489.0959217663976, 2486.3232236375966, 2484.677127601138, 2481.63237944456, 2480.869684054634, 2478.818191956405, 2476.728508334095, 2475.68174855053, 2474.8342232757345, 2473.8641488032813, 2473.473876998827]  #Y


## -20 tilt
# X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
# sigmay = [1.2552426767761358, 1.7803897667598843, 0.6463062709533344, 0.4921535563291503, 0.4233110506240444, 0.3969723445537178, 0.379830997727377, 0.3771159496188053, 0.38169479447061555, 0.3562513068381116, 0.35799526884431887, 0.3500638518415055, 0.3277814394102879, 0.2810343469258474, 0.22279678971917802, 0.18127615972200717, 0.10657345360719093] #sigy
# sigmaz = [0.6669235730726144, 1.2148165661261072, 0.4765130372073104, 0.3912837625878571, 0.3503571080300599, 0.3408815793355835, 0.3236542355944509, 0.339051853526612, 0.37697531328877676, 0.4132354402859387, 0.46658483758661434, 0.5126366084068461, 0.5578363947398289, 0.6017349645383988, 0.6354914143920146, 0.6487096419945122, 0.737022663190537]  #sigz
# Z_C_20_n = [86.67967290270168, 99.57409026516494, 106.9731067916532, 113.17082138162434, 117.68569837774646, 121.10515613116911, 125.0647932743461, 127.59230194192958, 130.0875399030215, 132.60539960368172, 134.50330716038027, 136.9624073411914, 138.21897184021145, 139.670846878197, 141.41488854517448, 142.9225867769201, 143.48364527942243] #Z
# Y_C_20_n = [2499.5017460005624, 2499.18071915521, 2496.0314264539966, 2494.209479744589, 2494.177134794114, 2490.1312412042626, 2487.7475387888894, 2485.6283524518453, 2483.3461286702814, 2481.901625030293, 2480.214783617409, 2477.351825323099, 2475.2401820779696, 2473.9938396100483, 2471.382073553874, 2469.9704467611814, 2470.10531865683]  #Y

## -35 tilt
# X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
# sigmay = [0.8244189698800157, 0.6024029799815012, 0.6093224081303246, 0.44960976022089494, 0.3930630568303988, 0.3981832174820402, 0.40878289334383894, 0.4133568239744189, 0.4316356803488093, 0.44549026593433294, 0.41397123983424244, 0.3373843700209892, 0.24227933603634463, 0.16628784154209447, 0.08308782524573832, 0.04155571896672743, 0.0003380983183455808] #sigy
# sigmaz = [0.19442217786655325, 0.28849874304008444, 0.33692615612725063, 0.2884963264451269, 0.2528694925146376, 0.2702897752485132, 0.2999455599959315, 0.3271669864639892, 0.408422978188509, 0.49748974732356116, 0.5317605069322571, 0.5914962077570648, 0.6115388247913511, 0.6766985283865756, 0.6850189280875735, 0.7212086761124722, 0.777435658398414]  #sigz
# Z_C_35_n = [86.24157466564435, 101.07226492136716, 107.98423990611295, 114.48634452501115, 119.33816986028027, 123.96146024920974, 127.60961005557837, 130.7080488408067, 133.7541541174053, 136.09111053613393, 137.20979265905464, 139.16941083706243, 140.03357910572657, 142.18861329197557, 143.21457516698212, 145.516263445937, 147.54833712565144 ] #Z
# Y_C_35_n = [2499.4479240528767, 2497.5936804928006, 2497.5560261660526, 2494.3777931940303, 2490.980027067911, 2489.7095444419933, 2487.9339418725854, 2484.716542663103, 2483.3452186122245, 2480.4934846644182, 2477.110726834622, 2475.8103683288755, 2473.497260000254, 2471.422293511948, 2468.8066275355054, 2466.756811846001, 2466.9068485137072]  #Y


# # -5 tilt (default)
# X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
# sigmay = [3.620652395011077, 1.9001187174615162, 0.9353771135750221, 0.5107471971198718, 0.42978473208759005, 0.3839338461743554, 0.374063788603435, 0.39012705439447876, 0.38695709154680563, 0.39829126421577415, 0.39095118850320143, 0.39704689354359385, 0.3977004627441319, 0.4107123220098429, 0.4129081941055791, 0.4344748292590568, 0.4337127025518822] # sigmay
# sigmaz = [2.2432098786983983, 1.3961719125350165, 0.755954254565374, 0.4592818994838727, 0.40318738840385854, 0.37372102633918103, 0.367752253933641, 0.3744143075411739, 0.38718786846898806, 0.3981052800029568, 0.4121418848254266, 0.4274035829902239, 0.4388200797964752, 0.4295260071830763, 0.4398919361685257, 0.4456690402908989, 0.45604487734391563]   # sigmaz
# Z_C_0 = [89.94610061435328, 95.49645626896056, 98.2265475064328, 100.49529508064013, 102.72240537093262, 103.85038109397676, 104.23645245320908, 105.01900208844084, 104.93112639911536, 104.7918075084111, 104.9938387356675, 104.82326870778621, 104.86740609339417, 104.83345927184934, 104.69344627371628, 104.80461048081625, 104.35492208525451] #Z
# Y_C_0 = [2499.523949696036, 2497.508003392592, 2497.6743370066906, 2495.863164631482, 2495.159256668798, 2493.451633868584, 2490.88406339492, 2490.7839345469697, 2487.6064300432463, 2485.859849423469, 2484.6473931202268, 2481.7582190813796, 2481.5359719974263, 2480.7214458760063, 2480.3737585938, 2478.883566974432, 2478.468778649857] #Y


# # 5 tilt
# X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
# sigmay = [10.534416743706212,0.8979433225831808, 0.5569370891146653, 0.46228632687176574, 0.4418692238389031, 0.41063591760341434,0.41268488637221923,0.42743981210750065,0.4343290431766817,0.4489958375269006,0.4643980521496253 ,0.4836357967619406, 0.5010995126571905, 0.515328329804013,0.5402094497258708, 0.5632812606569052, 0.6009223174375284]   #sigy
# sigmaz = [6.350511686246529, 0.6520098397072024, 0.43916231513688375, 0.3746798584886675,0.3602545016781201, 0.3226843978434129, 0.3080967463394823,0.3039904260707824,0.3005203899809468,0.29732923038334,0.2986499019389889 ,0.2965946573010577, 0.2910329829458407, 0.2901500696761998, 0.2901309224379686, 0.2891634120433182, 0.296594048549694] #sigz
# Z_C_5 = [89.09719716901935, 90.83767756026221, 90.57815228052672, 90.56968791075349, 89.84733116085401, 88.90706483595609, 87.81384325102103, 86.17736323455676, 84.93916831923703, 83.33615473808837, 83.01225858048416, 83.01225858048416, 83.36245394470659, 83.49590653288737, 83.75392978996629, 83.53494826586216, 83.78266554390308] #Z
# Y_C_5 = [2498.844542166793, 2498.472154616501, 2498.642610484224, 2496.735668172087, 2497.458928903369, 2494.971424293041, 2495.233783501523, 2491.9747863764346, 2490.42943217409, 2488.5478994637215, 2486.912432107493, 2485.843154252683, 2485.4458719136783, 2483.975377615859, 2481.833086416161, 2479.6583534584865, 2478.742380819284]  #Y


## 10 tilt
# X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
# sigmay = [11.566856354862932, 0.8185251072516069,0.5355890686338116, 0.45141676234400213, 0.4198328468956569,0.41092625935179605, 0.4365946044526015, 0.45786695605186933, 0.4761876253994781,  0.5024869779943413, 0.5432325346790041, 0.5607871134207331, 0.592533332663219, 0.6477570021530344, 0.696919810604235, 0.7424828574881366, 0.7963861251101604] # Y
# sigmaz = [6.783853290532606, 0.5910436850172545, 0.4338064559726529, 0.35225416739924853, 0.30711028779394,  0.27819983503607737, 0.25761052244449867, 0.24702471526565073, 0.23594624795837132,0.22987186516455954,0.2270829576046232, 0.2199480212623694, 0.21557963364859323, 0.2137683702248472, 0.20958322679802785, 0.2025967047878765, 0.20408758263581525]   # Z
# Z_C_10 = [89.84930372573861, 89.15685807798387, 87.95254645572378, 86.93113236227126, 85.36731160248235, 84.22435662501483, 83.02633897451912, 81.51882521152714, 80.37198214327715, 80.15840546542358, 79.88989596041188, 79.9248167898811, 80.63345656385897, 81.45434499142415, 81.77754154892244, 82.67950937818864, 83.29039704849045] #Z
# Y_C_10 = [2498.952574389726, 2497.6993665868113, 2499.0557606436373, 2497.970465656208, 2497.7687994141324, 2496.5773441608903, 2495.550145160467, 2492.2674099726833, 2491.995153619506, 2489.8344180040776, 2488.8719334679317, 2488.572397809847, 2486.5378318959324, 2485.032066740046, 2482.946141210619, 2478.99808802504, 2475.3402585202098]  #Y


## 25 tilt
# Noticeable kidney bean shape around 10 D downstream
# X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
# sigmay = [1.0486518586374045, 0.929293481327818, 0.5013492046906606,  0.4703943454181189, 0.5141311666540866, 0.5227016949321093, 0.571273034792967, 0.6984934204639048, 0.8170952006429221, 0.9800922833172495, 1.1046498554300472, 1.261702986758678, 1.38654058454812, 1.6379134114473277, 1.8018044888183442, 2.007842886875235, 2.1578047721042277] #sigy
# sigmaz = [0.4046093385523854, 0.5511559633520392, 0.26678936599278036, 0.21017174971273248, 0.16734336575795677, 0.12584344241611423, 0.09809101432374921, 0.06939870802606617, 0.046205874802820276, 0.017427648446448302, -0.008797192917793782, -0.03504928798436168, -0.05928478605242399, -0.08988956947543056, -0.11409218319420603, -0.14206048303716606, -0.16536844136511167]  #sigz
# Z_C_25 = [90.56968249109853, 82.16694970360412, 77.67281363265396, 73.2499960248699, 70.46213068067172, 67.28112760800242, 63.830002769756256, 62.58413771830426, 60.84087272998218, 60.74035480174294, 60.50779317293857, 61.29980418883348, 61.50922354059292, 62.24987121347377, 62.54121663872897, 63.34436655991553, 63.28341317975336] #Z
# Y_C_25 = [2499.2230841068795, 2499.6188773649087, 2498.801895435778, 2497.976160591793, 2499.435063879633, 2498.5479741789864, 2495.763863434187, 2493.920857733599, 2494.040014654551, 2495.147623157222, 2497.269334989691, 2495.4982137558186, 2494.7547797690745, 2489.943247887391, 2489.0370058659, 2477.0301802742542, 2456.8345831043994]  #Y




### NEW ###
# X_D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
# sigmay = [1.889999889800227, 0.6395163139415847, 0.3232207305737852, 0.11029355025555428, 0.08418663075284234, 0.0537196656815775, 0.019596268740748303, -0.016705214499968007, -0.17696642034125948, -0.2390552622158553, -0.3187700587762282, -0.41642948698956334, -0.5013387109852206, -0.5918906359235002, -0.6788088482199118, -0.7783043370214753, -0.8970815129340164] # sigmay
# sigmaz = [-13.838168708147052, 1.5144406871915215, 0.7389445780898212, 0.4329686655839872, 0.3775828500576363, 0.3471868533740787, 0.33844409625079647, 0.34094161662275174, 0.37425663560567807, 0.3830599505494347, 0.39537808351559284, 0.4104979715735888, 0.4009370439457378, 0.40146345244878046, 0.3997934760531787, 0.4006566284126499,0.41486086156777985 ]   # sigmaz
# Z_C_0 = [91.32827110752814, 96.15310958174713, 99.04417936542012, 102.43659802933917, 104.09001907230703, 106.57080501641671, 107.94078244348688, 108.80882273768488, 110.00280961859553, 111.14480951392866, 111.43425279736029, 113.19288489593339, 113.76186407783608, 115.09281185809257, 116.01141891332065, 115.9896407517489, 115.91052707911551] #Z
# Y_C_0 = [2498.9872465541907, 2497.65995676941, 2498.504708404111, 2495.5322083848596, 2494.64952638593, 2492.148238573235,2490.3104854054172, 2487.7767254903306, 2486.613330094977, 2484.9254406394843, 2483.4797067557784, 2480.816462254617, 2478.685306783356, 2478.372774614909,  2477.103004549218,2475.9519301789146, 2475.0233107475105 ] #Y



# # -5
# beginning = 1
# Z_values_0, Y_values_0, ky_0, kz_0, z0_0, y0_0 = kykzint(sigmay[5:11], sigmaz[4:11], X_D[5:11], X_D[4:11], beginning)


"""Import Data"""
table1 = Arrow.Table(file_1)
table1 = DataFrame(table1)


Num_rows = size(table1[:,1])
Num_rows = Num_rows[1]

# Find XZ slice of three turbine array
XZ_X = []
XZ_Z = []
XZ_u = []

# Find XY slice of most upstream turbine
YZ_X = []
YZ_Y = []
YZ_u = []

YZ_X_comp = []
YZ_Y_comp = []
YZ_u_comp = []

""" Reorder data into rows and columns for indicated slices"""

for i in 1:Num_rows
    x_value = table1[i,1]
    y_value = table1[i,2]
    z_value = table1[i,3]
    u_value = table1[i,4]
    v_value = table1[i,5]
    w_value = table1[i,6]

    """ For XZ data slice (streamwise) """
    # turbines are aligned at y = 2500 meters
    if y_value == y_center
        push!(XZ_X, x_value)
        push!(XZ_Z, z_value)
        push!(XZ_u, u_value)
    end

    """ For YZ data slice """
    # print("x_value: ", x_value, "\n")
    # print("inflow: ", inflow, "\n")
    if x_value == slice
        push!(YZ_X, z_value)
        push!(YZ_Y, y_value)
        push!(YZ_u, u_value)
    end

    if x_value == slice_comp
        push!(YZ_X_comp, z_value)
        push!(YZ_Y_comp, y_value)
        push!(YZ_u_comp, u_value)
    end

end

XZ_X = parse.(Float64, string.(XZ_X))
XZ_Z = parse.(Float64, string.(XZ_Z))
XZ_u = parse.(Float64, string.(XZ_u))

YZ_X = parse.(Float64, string.(YZ_X))
YZ_Y = parse.(Float64, string.(YZ_Y))
YZ_u = parse.(Float64, string.(YZ_u))

YZ_X_comp = parse.(Float64, string.(YZ_X_comp))
YZ_Y_comp = parse.(Float64, string.(YZ_Y_comp))
YZ_u_comp = parse.(Float64, string.(YZ_u_comp))

"""Find max and min of these slices"""
# XZ slice
x_min = findmin(XZ_X)
x_max = findmax(XZ_X)
z_min = findmin(XZ_Z)
z_max = findmax(XZ_Z)

# YZ slice
x_min_yz = findmin(YZ_X)
x_max_yz = findmax(YZ_X)
y_min = findmin(YZ_Y)
y_max = findmax(YZ_Y)

""" Determinie Delta Y (Assuming evenly spaced grid) """
spacing_yz = YZ_Y[2] - YZ_Y[1]

""" Determinie Delta X (Assuming evenly spaced grid) """
spacing = XZ_X[2]-XZ_X[1]

""" Initialize XZ and YZ grids for contour plots """
X_plot_yz = x_min_yz[1]:spacing_yz:x_max_yz[1]
Y_plot = y_min[1]:spacing_yz:y_max[1]

X_plot = x_min[1]:spacing:x_max[1]
Z_plot = z_min[1]:spacing:z_max[1]

NumX_yz = (x_max_yz[1]-x_min_yz[1])/spacing_yz
NumY_yz = (y_max[1] - y_min[1])/spacing_yz

NumX = (x_max[1]-x_min[1])/spacing
NumZ = (z_max[1]-z_min[1])/spacing

NumX = convert(Int64, NumX)
NumZ = convert(Int64, NumZ)

NumX_yz = convert(Int64, NumX_yz)
NumY_yz = convert(Int64, NumY_yz)

X_plot = LinRange(x_min[1], x_max[1], NumX+1)
Z_plot = LinRange(z_min[1], z_max[1], NumZ+1)
X_plot_yz = LinRange(x_min_yz[1], x_max_yz[1], NumX_yz+1)
Y_plot = LinRange(y_min[1], y_max[1], NumY_yz+1)

""" Create grid, assuming grid is uniformly spaced """
size_X = size(X_plot)
size_X_yz = size(Y_plot)
size_Z = size(X_plot)
size_Y = size(Y_plot)

YZ_grid = zeros((size_X_yz[1], size_Y[1]))
YZ_grid_comp = zeros((size_X_yz[1], size_Y[1]))
XZ_grid = zeros((size_X[1], size_Z[1]))

size_U_yz = size(YZ_u)
size_U = size(XZ_u)
spacing_yz = convert(Int64, spacing_yz)
spacing = convert(Int64, spacing)

"""Fill XZ grid values"""

for i in 1:size_U[1]
    x_coord = XZ_X[i]
    z_coord = XZ_Z[i]
    x_coord = convert(Int64, x_coord)
    z_coord = convert(Int64, z_coord)
    x_coord = ((x_coord-(spacing/2))/spacing)+1
    z_coord = ((z_coord-(spacing/2))/spacing)+1
    x_coord = convert(Int64, x_coord)
    z_coord = convert(Int64, z_coord)
    XZ_grid[x_coord, z_coord] = XZ_u[i]
end

"""Fill YZ grid values"""

for i in 1:size_U_yz[1]
    x_coord_yz = YZ_X[i]
    y_coord_yz = YZ_Y[i]
    x_coord_yz = convert(Int64, x_coord_yz)
    y_coord_yz = convert(Int64, y_coord_yz)
    x_coord_yz = ((x_coord_yz-(spacing_yz/2))/spacing_yz)+1
    y_coord_yz = ((y_coord_yz-(spacing_yz/2))/spacing_yz)+1
    x_coord_yz = convert(Int64, x_coord_yz)
    y_coord_yz = convert(Int64, y_coord_yz)
    YZ_grid[x_coord_yz, y_coord_yz] = YZ_u[i]
end

"""Fill YZ_comp grid values"""

for i in 1:size_U_yz[1]
    x_coord_yz = YZ_X_comp[i]
    y_coord_yz = YZ_Y_comp[i]
    x_coord_yz = convert(Int64, x_coord_yz)
    y_coord_yz = convert(Int64, y_coord_yz)
    x_coord_yz = ((x_coord_yz-(spacing_yz/2))/spacing_yz)+1
    y_coord_yz = ((y_coord_yz-(spacing_yz/2))/spacing_yz)+1
    x_coord_yz = convert(Int64, x_coord_yz)
    y_coord_yz = convert(Int64, y_coord_yz)
    YZ_grid_comp[x_coord_yz, y_coord_yz] = YZ_u_comp[i]
end


""" Plot XZ """
XZ_grid = transpose(XZ_grid)
data = contourf((X_plot./126.4).-4.0, X_plot./90.0, XZ_grid)
data1 = heatmap((X_plot./126.4).-4.0, X_plot./90.0, XZ_grid)
plot(data1, ylim=(0,4), xlim=(-1, 25), c=:bluesreds, aspect_ratio=:equal, xlabel="x/D", ylabel="y/HH", xticks = ([0,5,6,7,8,9,10,15,20,25]))
""" Plot YZ """
# YZ_grid = YZ_grid
# data1 = heatmap(Y_plot, Y_plot, YZ_grid)
# plot(data1, ylim=(0,200), xlim=(800,1000), aspect_ratio=:equal)

# ### Extract Velocity profiles at 1D, 2D, 3D, 4D, 5D, 6D ###
### Based on center of wake at each downstream distance

# # This can be done by extracting the vertical velocity vector
# # at each downstream distance from the XY
# # 0D = X_plot[51]
# # 1D = X_plot[63]
# # 2D = X_plot[76]
# # 3D = X_plot[89]
# # 4D = X_plot[101]
# # 5D = X_plot[114]
# # 6D = X_plot[127]
# # 7D = X_plot[139]
# # 8D = X_plot[152]
# # 9D = X_plot[165]
# # 10D = X_plot[177]
# # 11D = X_plot[190]
D_0 = XZ_grid[:,50]


### Preliminary example for sigma calculation
# U_c = 
D_1 = XZ_grid[:,63]
D_2 = XZ_grid[:,75]
D_3 = XZ_grid[:,88]
D_4 = XZ_grid[:,101]
D_5 = XZ_grid[:,114]
D_6 = XZ_grid[:,126]
D_7 = XZ_grid[:,133]
D_8 = XZ_grid[:,151]
D_9 = XZ_grid[:,164]
D_10 = XZ_grid[:,177]
D_11 = XZ_grid[:,189]
D_12 = XZ_grid[:,201]
D_13 = XZ_grid[:,214]
D_14 = XZ_grid[:,222]
D_15 = XZ_grid[:,240]
D_16 = XZ_grid[:,252]
D_17 = XZ_grid[:,265]
D_18 = XZ_grid[:,277]
D_19 = XZ_grid[:,290]
D_20 = XZ_grid[:,303]
D_21= XZ_grid[:,310]
D_22 = XZ_grid[:,328]
D_23 = XZ_grid[:,341]
D_24 = XZ_grid[:,353]
D_25 = XZ_grid[:,366]
D_26 = XZ_grid[:,378]
D_27 = XZ_grid[:,391]
D_28 = XZ_grid[:,403]
D_29 = XZ_grid[:,416]
D_30 = XZ_grid[:,429]
D_31 = XZ_grid[:,441]
D_32 = XZ_grid[:,454]
D_33 = XZ_grid[:,466]
D_34 = XZ_grid[:,479]
D_35 = XZ_grid[:,491]


# XZ_data_save = []
# push!(XZ_data_save, D_0, D_1, D_2, D_3, D_4, D_5, D_6, D_7, D_8, D_9, D_10, D_11, D_12, D_13, D_14, D_15, D_16, D_17, D_18, D_19, D_20, D_21, D_22, D_23, D_24, D_25, D_26, D_27, D_28, D_29, D_30, D_31, D_32, D_33, D_34, D_35)
# save(filename, "data", XZ_data_save)
# # load("base.jld")["data"]

# Save YZ slice
save(filenameYZ, "data", YZ_grid)
data1 = heatmap(Y_plot, Y_plot, YZ_grid)

# Comparing YZ slices
### Load SOWFA data
SOWFA_data = "/Users/jamescutler/Downloads/byu_tilt_runs_single_opp/"*filenameYZ
SOWFA_data = load(SOWFA_data)["data"]

### Load FLOWFarm data
# FLOW_data = "/Users/jamescutler/Downloads/bbyu_tilt_runs_single/FLOWFarm/YZ_slice_turbine_3_base.jld"
# FLOW_data = load(FLOW_data)["data"]

# ## Load FLORIS data
# FLORIS_data = "/Users/jamescutler/Downloads/byu_tilt_runs_single/FLORIS_runs/YZslice_25_25_floris_umesh.dat"
# FLORIS_data = CSV.read(FLORIS_data, DataFrame)
# FLORIS_data = Matrix{Union{Real,Missing}}(FLORIS_data)
# difference = SOWFA_data.-FLOW_data
# # difference = SOWFA_data

# data1 = heatmap(Y_plot, Y_plot, clim=(-1,1), c = :bluesreds, difference)
# plot(data1, ylim=(0,300), xlim=(700,1150), aspect_ratio=:equal)

# # plot rotor radius
# f(t) = 900 .+ (126/2).*cos.(t)
# g(t) = 90 .+ (126/2).*sin.(t)
# range = 0:0.01:2*pi
# x_values = f(range)
# y_value = g(range)
# plot!(x_values, y_value)


data1 = heatmap(Y_plot, Y_plot, clim=(0,9), SOWFA_data)
plot(data1, ylim=(0,300), xlim=(700,1150), aspect_ratio=:equal)

"""crop SOWFA data to find center"""
Z_limits = [300, Z_cut_off]
X_limits = [x_low, x_high]

znum = round((Z_limits[1] - 5)/10)
zn1 = Int(1+znum)
znum = round((Z_limits[2] - 5)/10)
zn2 = Int(1+znum)+1

xnum = round((X_limits[1] - 5)/10)
xn1 = Int(1+xnum)
xnum = round((X_limits[2] - 5)/10)
xn2 = Int(1+xnum)

cropped_SOWFA_data = SOWFA_data[zn2:zn1, xn1:xn2]
cropped_YZ_grid_comp = YZ_grid_comp[zn2:zn1, (xn1-100):(xn2-100)]
crop_Y_plot = Y_plot[xn1:xn2]
crop_Z_plot = Y_plot[zn2:zn1]


negative = cropped_YZ_grid_comp - cropped_SOWFA_data

# filter out spurious velocities near the ground of the wake
negative = neg_filter(negative)

cropped_SOWFA_data_comp = SOWFA_data[zn2:zn1, xn1:xn2]
cropped_SOWFA_data_comp_neg = negative[:, :]
YZ_grid_comp = YZ_grid_comp[zn2:zn1, xn1-100:xn2-100]
crop_Y_plot_comp = Y_plot[xn1:xn2]
crop_Z_plot_comp = Y_plot[zn2:zn1] 


"""Find general shape of wake"""

# This needs to be solved for each time.
# Find min velocity in wake and max velocity(ambient vel) and take average
# velocity = (maximum(cropped_SOWFA_data)+minimum(cropped_SOWFA_data))/2    # m/s

# 6.5 for 4 - 
tolerance = 0.1     # m/s

tlow = velocity- tolerance
thigh = velocity + tolerance

# Find points along border of wake shape
Wake_shape = filter(t -> tlow < t < thigh, cropped_SOWFA_data)
Wake_shape_index = findall(t -> tlow < t < thigh, cropped_SOWFA_data)
len = length(Wake_shape_index)
X_wake = zeros(len)
Y_wake = zeros(len)
for i in 1:len
    X_wake[i] = Int(Wake_shape_index[i][1])
    Y_wake[i] = Int(Wake_shape_index[i][2])
end
X_wake = Int.(X_wake)
Y_wake = Int.(Y_wake)

# Find points along border and within wake shape
Wake_shape = filter(t -> t < velocity, cropped_SOWFA_data)
Wake_shape_index = findall(t -> t < velocity, cropped_SOWFA_data)
len = length(Wake_shape_index)
X_whole_wake = zeros(len)
Y_whole_wake = zeros(len)
for i in 1:len
    X_whole_wake[i] = Int(Wake_shape_index[i][1])
    Y_whole_wake[i] = Int(Wake_shape_index[i][2])
end
X_whole_wake = Int.(X_whole_wake)
Y_whole_wake = Int.(Y_whole_wake)

# Find points along border and within wake shape
Wake_shape = filter(t -> t > tolerance_comp, cropped_SOWFA_data_comp_neg)
Wake_shape_index = findall(t -> t > tolerance_comp, cropped_SOWFA_data_comp_neg)
len = length(Wake_shape_index)
X_whole_wake_comp = zeros(len)
Y_whole_wake_comp = zeros(len)
for i in 1:len
    X_whole_wake_comp[i] = Int(Wake_shape_index[i][1])
    Y_whole_wake_comp[i] = Int(Wake_shape_index[i][2])
end
X_whole_wake_comp = Int.(X_whole_wake_comp)
Y_whole_wake_comp = Int.(Y_whole_wake_comp)

"""Identify weighted centroid of this shape"""
# Weighted center of mass "center of velocity deficit"
Y_points_comp = crop_Y_plot_comp[Y_whole_wake_comp]
Z_points_comp = crop_Z_plot_comp[X_whole_wake_comp]

Y_points = crop_Y_plot[Y_whole_wake]
Z_points = crop_Z_plot[X_whole_wake]

M = sum(cropped_SOWFA_data[X_whole_wake, Y_whole_wake])     # Sum up velocity of each point within wake shape
m_x = cropped_SOWFA_data[X_whole_wake, Y_whole_wake].*Z_points
m_y = cropped_SOWFA_data[X_whole_wake, Y_whole_wake].*Y_points
Z_cm = sum(m_x)/M
Y_cm = sum(m_y)/M

M_comp = sum(cropped_SOWFA_data_comp_neg[X_whole_wake_comp, Y_whole_wake_comp])     # Sum up velocity of each point within wake shape
m_x_comp = cropped_SOWFA_data_comp_neg[X_whole_wake_comp, Y_whole_wake_comp].*Z_points_comp
m_y_comp = cropped_SOWFA_data_comp_neg[X_whole_wake_comp, Y_whole_wake_comp].*Y_points_comp
# Z_cm_comp = sum(m_x_comp)/M_comp - Z_limits[2]
Z_cm_comp = sum(m_x_comp)/M_comp
Y_cm_comp = sum(m_y_comp)/M_comp

"""Convert centroid coordinates to indices to find U_centroid"""

Z_round = round((Z_cm - 5)/10)
Z_index = Int(1+Z_round)
Y_round = round((Y_cm - 5)/10)
Y_index = Int(1+Y_round)

Z_round_comp = round((Z_cm_comp - 5)/10)
Z_index_comp = Int(1+Z_round_comp)
Y_round_comp = round((Y_cm_comp - 5)/10)
Y_index_comp = Int(1+Y_round_comp)

U_centroid = SOWFA_data[Z_index, Y_index]
U_centroid_comp = SOWFA_data[Z_index_comp, Y_index_comp]

"""Pull vertical and horizontal velocity profiles"""

Vert_Velocity = SOWFA_data[zn2:zn1, Y_index]
Horz_Velocity = SOWFA_data[Z_index,xn1:xn2]

Vert_Velocity_comp = SOWFA_data[ zn2:zn1, Y_index_comp]
Horz_Velocity_comp = SOWFA_data[Z_index_comp,xn1:xn2]

# Should just use wake centroid velocity, but maybe it should be minimum velocity in wake
if downstream_loc < 0
    U_c_vert = U_inf - minimum(Vert_Velocity)       # U_inf is defined by user
    U_c_horz = U_inf - minimum(Horz_Velocity)
    U_c_vert_p = U_inf.-Vert_Velocity
    U_c_horz_p = U_inf.-Horz_Velocity
else
    U_c_vert = U_inf - U_centroid_comp
    U_c_horz = U_inf - U_centroid_comp
    U_c_vert_p = U_inf.- Vert_Velocity_comp
    U_c_horz_p = U_inf.- Horz_Velocity_comp
end

# sigma_z_d = -((1/(sqrt(2*pi)*(U_c_vert)))*-trapz(crop_Z_plot,(U_c_vert_p)))/D
# sigma_y_d = -((1/(sqrt(2*pi)*(U_c_horz)))*-trapz(crop_Y_plot,(U_c_horz_p)))/D
plot(U_c_horz_p, xticks = 0:5:200)
plot!(size=(1000,400))
# num1 = readline()
# num1 = parse(Int64, num1)
# num2 = readline()
# num2 = parse(Int64, num2)
# Sigma_y_crop= [num1, num2]



# # Equation 4.1 in Banstkanhah wake model paper (2016)
# sigma_z_d_comp = -((1/(sqrt(2*pi)*(U_c_vert)))*-trapz(crop_Z_plot_comp,(U_c_vert_p)))/D
# sigma_y_d_comp = -((1/(sqrt(2*pi)*(U_c_horz)))*-trapz(crop_Y_plot_comp[Sigma_y_crop[1]:Sigma_y_crop[2]],(U_c_horz_p[Sigma_y_crop[1]:Sigma_y_crop[2]])))/D

# # Z_avg
# # use trapz
# # Area = 

# """Find center location and respective velocity"""
# # Basntankhah paper sepcifices that minimum velocity deficit is where center of wake is
# # This assumption is true past about 5D downstream of the turbine
# min_loc = argmin(SOWFA_data)
# U_c = SOWFA_data[min_loc[1],min_loc[2]]


# # """plot cropped data and min location"""
# data1 = heatmap(crop_Y_plot_comp, crop_Z_plot_comp, cropped_SOWFA_data_comp)
# plot(data1, aspect_ratio=:equal)

# # data1 = heatmap(crop_Y_plot_comp, crop_Z_plot_comp, negative)
# # plot(data1, aspect_ratio=:equal)

# # data1 = heatmap(crop_Y_plot_comp, crop_Z_plot_comp,cropped_SOWFA_data_comp_neg)
# # plot(data1, aspect_ratio=:equal)
# # plot!([crop_Y_plot[min_loc[1]]], [crop_Z_plot[min_loc[2]]], color="blue")
# # scatter!([crop_Y_plot[min_loc[2]]], [crop_Z_plot[min_loc[1]]], color="blue", label="wake center")
# print("Y_cm: ", Y_cm_comp, "\n")
# print("Z_cm: ", Z_cm_comp)
# scatter!(crop_Y_plot_comp[Y_whole_wake_comp], crop_Z_plot_comp[X_whole_wake_comp], color="red", label="Wake Shape")
# scatter!([2500.0], [90.0], color="blue", label="center of turbine")
# scatter!([Y_cm_comp], [Z_cm_comp], color="green", label="Center of Mass")
# xlims!((2250,2750))
# # # data1 = heatmap(Y_plot, Y_plot, clim=(0,9), FLORIS_data)
# # # plot(data1, ylim=(0,300), xlim=(700,1150), aspect_ratio=:equal)
# print("sig z: ", sigma_z_d_comp, "\n")
# print("sig y: ", sigma_y_d_comp, "\n")




"""Looking at finding relationship for sig0y and sig0z"""
# SOWFA
sig0y = [0.6324600220803214, 0.5420122398617231, 0.45555274142164887, 0.35337147482723696, 0.3178969525976916, 0.22800268824662198, -0.2302104789208812]
sig0z = [0.040171620571319316, 0.06732198572068403, 0.1269824071340052, 0.3225851494794991, 0.32627652890037356, 0.29616027651514, 0.2650910334989699]

TILT = [-35, -20, -15, -5, 5, 10, 25]
# Bastankhah
sig0z_b = cos.(TILT.*pi/180)/sqrt(8)

"""CONSIDER NOT TRYING TO FIT TO NEGATIVE TILT AND JUST FOCUS ON THE BENEFITS OF POSITIVE TILT"""

"""TO PROVE NEGATIVE TILT IS BAD WE CAN RUN THREE TURBINE CASE WITH NEGATIVE TILT ANGLES AND LOOK AT POWER"""


"""Looking at deriving deflection"""
ky = [-0.033, -0.021, -0.012, 0.004, 0.016, 0.032, 0.141]
kz = [0.047, 0.04, 0.031, 0.009, -0.003, -0.007, -0.027]


sig0y = [0.6324600220803214, 0.5420122398617231, 0.45555274142164887, 0.35337147482723696, 0.3178969525976916, 0.22800268824662198, -0.2302104789208812]
sig0z = [0.040171620571319316, 0.06732198572068403, 0.1269824071340052, 0.3225851494794991, 0.32627652890037356, 0.29616027651514, 0.2650910334989699]
# plot(sig0y[4:end], TILT[4:end])

I = 0.08
CT = 0.8



# # tilt -35
# defl_35, xvar_35 = deflection_call(1, ky, kz, sig0y, sig0z, TILT, I, CT)

# # tilt -20
# defl_20, xvar_20 = deflection_call(2, ky, kz, sig0y, sig0z, TILT, I, CT)

# # tilt -15
# defl_15, xvar_15 = deflection_call(3, ky, kz, sig0y, sig0z, TILT, I, CT)
TILT = [-40, -25, -20, -10, 0, 5, 20]

# base tilt -5
defl_0, xvar_0 = deflection_call(4, ky, kz, sig0y, sig0z, TILT, I, CT)

# tilt 5
defl_5, xvar_5 = deflection_call(5, ky, kz, sig0y, sig0z, TILT, I, CT)

# tilt 10
defl_10, xvar_10 = deflection_call(6, ky, kz, sig0y, sig0z, TILT, I, CT)

# tilt 25
defl_25, xvar_25 = deflection_call(7, ky, kz, sig0y, sig0z, TILT, I, CT)

# # SOWFA deflection

# X_D = [4, 5, 6, 7, 8, 9, 10, 11]
# Z_C_0 = [99.63967017354084, 98.45427852648643, 96.59368232105771, 91.95162426180555, 85.0814652582951, 76.46572702298704, 69.9175617140443, 60.266311677827595] #Z
# Z_C_5 = [88.4061997235887, 87.6668665653627, 83.53242730274529, 80.02195980208653, 73.8526132629067, 67.81575780501393, 63.00202558179132, 57.41052962659714] #Z
# Z_C_10 = [83.49768448270565, 81.74066544888844, 76.83889812534574, 71.6312013311421, 67.3194618675204, 63.20050680722589, 58.25342380244782, 53.2284885542085] #Z
# Z_C_25 = [67.25371769433993, 62.130306440546086, 58.4666343552621, 55.25496964164948, 51.66377112780846, 48.50200230182843, 44.92602406185611, 41.753554873174146] #Z


d = D
plot(xvar_0/d, 1 .-defl_0/90,color=:red, label="S \\gamma=-5")
plot!(xvar_5/d, 1 .-defl_5/90, color=:blue, label="S \\gamma=5")
plot!(xvar_10/d,1 .-defl_10/90, color=:green, label="S \\gamma=10")
plot!(xvar_25/d, 1 .-defl_25/90, color=:black, label="S \\gamma=25")
plot!(X_D, Z_C_0/90,seriestype=:scatter,markershape=:circle, color=:red, label="B \\gamma=-5")
plot!(X_D, Z_C_5/90,seriestype=:scatter,markershape=:square, color=:blue, label="B \\gamma=5")
plot!(X_D, Z_C_10/90,seriestype=:scatter,markershape=:star, color=:green, label="B \\gamma=10")
plot!(X_D, Z_C_25/90,seriestype=:scatter,markershape=:star5, color=:black, label="B \\gamma=25", ylabel="\\delta/HH", xlabel="X/D", legend=:outertopright, grid=false)
xlims!((0,16))
savefig("zdeflection_new.png")

# seriestype=:scatter,markershape=:square,color=:orange
# seriestype=:scatter,markershape=:star,color=:purple
# seriestype=:scatter,markershape=:star5,color=:magenta
# seriestype=:scatter,markershape=:circle,color=:red
# seriestype=:scatter,markershape=:square,color=:blue
# seriestype=:scatter,markershape=:star,color=:green
# seriestype=:scatter,markershape=:star5,color=:black

# plot(X_D_0_y, sigmay_0,seriestype=:scatter,markershape=:circle, color=:red, label="\\gamma=-5")
# plot!(X_D_5_y, sigmay_5,seriestype=:scatter,markershape=:square, color=:blue,  label="\\gamma=5")
# plot!(X_D_10_y, sigmay_10,seriestype=:scatter,markershape=:star, color=:green, label="\\gamma=10")
# plot!(X_D_25_y, sigmay_25,seriestype=:scatter,markershape=:star5, color=:black,  label="\\gamma=25")
# plot!(X_D_0_y, Z_values_0,color=:red,label="ky=$ky_0")
# plot!(X_D_5_y, Z_values_5,color=:blue,label="ky=$ky_5")
# plot!(X_D_10_y,Z_values_10,color=:green, label="ky=$ky_10")
# plot!(X_D_25_y, Z_values_25,color=:black,label="ky=$ky_25", ylabel="\\sigma_y/D", xlabel="X/D", legend=:outertopright)



# x_0 = d*(cos(tilt*pi/180)*(1+sqrt(1-C_T)))/(sqrt(2)*((alpha*I) + (beta*(1-sqrt(1-C_T)))))
# x = x_0:3000

# sigma_z = kz.*(x.-x_0)/d .+ sigma0x
# sigma_z_g = 0.1

# # find where sigma_z is below ground threshold
# index = findall(x -> x < sigma_z_g, sigma_z)
# ind = index[1]
# x1 = x[1]:x[ind]
# x2 = x[ind]:3000


# c1 = sqrt(((sigma0x^2)/(kz^2)) - (2*sigma0x*sigma0y/(ky*kz)) + ((sigma0y^2)/ky^2))
# b1 = ((sigma0x/kz)+(sigma0y/ky)+c1)*(x1.-x_0) .+ (2*d*sigma0x*sigma0y/(ky*kz))
# a1 = ((sigma0x/kz)+(sigma0y/ky)-c1)*(x1.-x_0) .+ (2*d*sigma0x*sigma0y/(ky*kz))

# c2 = sqrt(((sigma0x^2)/(kz2^2)) - (2*sigma0x*sigma0y/(ky*kz2)) + ((sigma0y^2)/ky^2))
# b2 = ((sigma0x/kz2)+(sigma0y/ky)+c2)*(x2.-x_0) .+ (2*d*sigma0x*sigma0y/(ky*kz2))
# a2 = ((sigma0x/kz2)+(sigma0y/ky)-c2)*(x2.-x_0) .+ (2*d*sigma0x*sigma0y/(ky*kz2))


# sigmay = (ky.*(x.-x_0) .+ (d/(sqrt(8))))
# sigmaz = (-kz.*(x.-x_0) .+ ((d*cos(tilt*pi/180))/(sqrt(8))))
# a_norm = (1.6 + sqrt(C_T)).*(1.6.*sqrt.((8 .*sigmay.*sigmaz)/(d^2 * cos(tilt*pi/180))).-sqrt(C_T))
# b_norm = (1.6 - sqrt(C_T)).*(1.6.*sqrt.((8 .*sigmay.*sigmaz)/(d^2 * cos(tilt*pi/180))).+sqrt(C_T))

# inlog1 = (b1./a1)
# inlog2 = (b2./a2)
# plot(x1/d, inlog1)
# plot!(x2/d, inlog2)
# # inlog[inlog.<0.00001] .= 0
# theta_c0 = (0.3*(tilt*pi/180)/cos(tilt*pi/180))*(1-sqrt(1-C_T*cos(tilt*pi/180)))

# # Convert theta to degrees
# # theta_c0 = theta_c0 * (180/pi)
# delta_0 = theta_c0 * x_0


# e_0 = (2.93 + 1.2607*sqrt(1-C_T)) - C_T

# val1 = (sigma0x*sigma0y*theta_c0*e_0)/(1.6*ky*kz*(d^2)*c1)
# val2 = (sigma0x*sigma0y*theta_c0*e_0)/(1.6*ky*kz2*(d^2)*c2)


# val_normal = (theta_c0*d/14.7)*(sqrt(cos(tilt*pi/180)/(ky*-kz*C_T)))*e_0
# delta_normal = delta_0 .+ val_normal.*(log.(a_norm./b_norm))
# # val = -1
# d1 = val1*(log.(b1./a1))


# """Things that are wrong"""
# # log.(b1./a1) is wrong. Should be asymptoting, but instead 
# # exponentially decreases

# # delta1 = delta_0 .+val1*(log.(b1./a1))
# # delta2 = delta_0 .+val2*(log.(b2./a2)).+d1[end]
# delta1 = delta_0 .-val_normal*(log.(b1./a1))
# delta2 = delta_0 .-val_normal*(log.(b2./a2)).+d1[end]
# plot(x1/d, delta1)
# plot!(x2/d, delta2)
# plot!(x/d, delta_normal)

# val3 = -(sigma0x^2/kz^2) + (2*sigma0x*sigma0y/(ky*kz)) + -(sigma0y^2/ky^2)
# # Getting negative in sqrt even with ky=kz.
# # Need to go through derivation again, something isn't right.
#         # Maybe derivation is right, just need to solve for delta all the way

# """Validating Tilt Deflection Value"""

# # Looking at how sigz0 matches predicted
# kz = [-0.017, -0.025, -0.026, -0.039]
# ky = [0.006, 0.017, 0.02, 0.028]

# sig0y = [0.3316, 0.29196, 0.29352, 0.3321666]
# sig0z = [0.3822, 0.3747, 0.32112, 0.22124]

# tilt = [-5, 5, 10, 25]

# predicted = [1/sqrt(8), 1/sqrt(8), 1/sqrt(8), 1/sqrt(8)]
# pred_tilt = cos.(tilt.*pi/180)/sqrt(8)


# # sigma0y = 0.15441985668899924
# # sigma0x = 0.29874
# d = 126.0
# # Bastankhah numbers

# C_T = 0.8        # CT
# alpha = 2.32
# beta = 0.154
# I = 0.08
# # tilt = -15       # degrees

# x_0 = d*(cos.(tilt.*pi/180)*(1+sqrt(1-C_T)))/(sqrt(2)*((alpha*I) + (beta*(1-sqrt(1-C_T)))))
# x = x_0:3000

# sigma_z = kz.*(x.-x_0)/d .+ sigma0x
# sigma_z_g = 0.1


